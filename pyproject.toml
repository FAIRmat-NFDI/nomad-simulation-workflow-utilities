[build-system]
requires = [
    "setuptools>=61.0.0",
    "setuptools-scm>=8.0",
]
build-backend = "setuptools.build_meta"

[project]
name = 'nomad-simulation-workflow-utilities'
description = 'Utilities for interfacing with NOMAD within simulation workflows, including python API functions for uploading to NOMAD and querying the repository as well as automated generation of NOMAD custom workflow yaml files.'
authors = [
    { name = "Jose M. Pizarro", email = "jose.pizarro@physik.hu-berlin.de" },
    { name = "Joseph F. Rudzinski", email = "joseph.rudzinski@physik.hu-berlin.de" }
]
maintainers = [
    { name = "Jose M. Pizarro", email = "jose.pizarro@physik.hu-berlin.de" },
    { name = "Joseph F. Rudzinski", email = "joseph.rudzinski@physik.hu-berlin.de" }
]
dynamic = ["version"]
license = { file = "LICENSE" }
requires-python = ">=3.10"
readme = "README.md"
dependencies = [
    "nomad-lab@git+https://github.com/nomad-coe/nomad.git@develop",
    "nomad-schema-plugin-simulation-workflow@git+https://github.com/nomad-coe/nomad-schema-plugin-simulation-workflow.git@develop",
    "networkx",
    "numpy>=1.25.0,<2.0.0",
    "regex",
    "pymbar>=4.0.1",
    "jupyter>=1.0.0",
    "jupyterlab",
    "h5py",
    "networkx",
    "confuse",
    "python-decouple",
    "marshmallow-dataclass>=8.6.0",
    "cachetools>=5.3.2",
    "isort>=5.8.0",
    "insane>=1.2.0",
    "anyio>=3.0.0,<4.0",
]

[project.urls]
"Homepage" = "https://github.com/FAIRmat-NFDI/nomad-simulation-workflow-utilities"
"Bug Tracker" = "https://github.com/FAIRmat-NFDI/nomad-simulation-workflow-utilities/issues"
"Documentation" = "https://FAIRmat-NFDI.github.io/nomad-simulation-workflow-utilities/"

[project.optional-dependencies]
dev = [
    'mypy==1.5.1',
    'pytest',
    'pytest-timeout',
    'pytest-cov',
    'ruff',
    "structlog==22.3.0",
    "lxml_html_clean>=0.1.0",
]

[tool.ruff]
include = ["src/nomad_simulation_workflow_utilities/*.py", "tests/*.py"]
lint.select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "PL", # pylint
]
lint.ignore = [
    "E501", # Line too long ({width} > {limit} characters)
    "E701", # Multiple statements on one line (colon)
    "E731", # Do not assign a lambda expression, use a def
    "E402",  # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used instead of constant
    "PLW0603", # Using the global statement
    "PLW2901", # redefined-loop-name
    "PLR1714", # consider-using-in
    "PLR5501", # else-if-used
]
lint.fixable = ["ALL"]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.format]
# use single quotes for strings.
quote-style = "single"

# indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.setuptools.packages.find]
where = ["src"]
